[{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://majerr.github.io/sqlhelper/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"creating-connections","dir":"Articles","previous_headings":"","what":"Creating connections","title":"Managing Connections","text":"can define database connections config files read processed connect() function. example, config file called my_db_config.yml, might run:","code":"library(sqlhelper)  connect(\"examples/sqlhelper_db_conf.yml\")"},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"config-files","dir":"Articles","previous_headings":"Creating connections","what":"Config files","title":"Managing Connections","text":"config file can contain one connection definitions. example defines two simple connections: Connection definitions YAML. following YAML chunk defines connection called ‘dap’. first line name connection; subsequent lines contain information connection. driver_type line defines brand database, hence driver package used. parameter required. Current options : ‘odbc’ (odbc) ‘sqlserver’ (odbc) ‘sqlite’ (RSQLite) ‘postgresql’ (RPostgres) ‘mariadb’(RMariaDB) ‘mysql’(RMariaDB) ‘bigquery’ (bigquery) pool line determines whether single connection required (returned DBI::dbConnect()) pool connections (returned pool::dbPool()). latter recommended shiny applications. parameter defaults ‘’, meaning single connection provided. description line provides short description connection. parameter can omitted. connection section contains several lines provide parameters required connection , passed constructor function name=value pairs. example, need supply Driver connection string using odbc driver. server parameter probably always required see DBI::dbConnect() details. summary, elements needed every connection : connection name, driver_type, connection section containing Server element others may needed connections may omitted entirely. function config_examples() provides several example configurations.","code":"readLines(\"examples/sqlhelper_db_conf.yml\") |>   writeLines() #> #### sqlhelper_db_conf.yml #### #>  #> simple_sqlite: #>   driver_type: sqlite #>   description: \"A simple connection to an in-memory database\" #>   connection: #>     Server: \":memory:\" #>  #> pool_sqlite: #>   driver_type: sqlite #>   pool: yes #>   description: \"A pooled connection to an in-memory database\" #>   connection: #>     Server: \":memory:\" dap:   driver_type: sqlserver   pool: yes   description: >     Databases managed by ADD teams on the Data and Analytics Platform   connection:     Driver: \"{ODBC Driver 17 for SQL Server}\"     Server: \"Dap-sql01\"     Trusted_Connection: \"yes\""},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"the-config-search-path","dir":"Articles","previous_headings":"Creating connections","what":"The config search path","title":"Managing Connections","text":"default, connect() function reads config file named config_filename parameter, also config files found search path includes user’s site’s config directories. use database connections often, can place config file called sqlhelper_db_config.yml directory named rappdirs::user_config_dir(). Similarly, site admin can provide users pre-configured connections placing config file name directory named rappdirs::site_config_dir(). either cases, config filename needed connect() can called without arguments. Nonetheless, case require additional connections provided user- site-wide configurations, may provide config_filename argument.","code":""},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"suppressing-the-config-search-path","dir":"Articles","previous_headings":"Creating connections","what":"Suppressing the config search path","title":"Managing Connections","text":"one config file wanted, config search path may suppressed supplying exclusive = TRUE argument. exclusive = TRUE, connect() check whether config_filename parameter ‘user’ ‘site’. config_filename one , user- site-wide config file sought; , treated name config file, file sought.","code":""},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"file-precedence-inheritance-and-conflicts-across-config-files","dir":"Articles","previous_headings":"Creating connections","what":"File precedence, inheritance, and conflicts across config files","title":"Managing Connections","text":"exclusive == FALSE, site-wide config files read first, user-wide, named files. conflicting connection names connection elements encountered config files, values later files overwrite earlier. mechanism operates element-wise; example, site-wide config contains: named file contains: sqlhelper attempt create connection described :","code":"my_conn:   server_type: mysql   connection:     Server: \"organization_server_host\" my_conn:   description: Private MySQL database   connection:     Server: \"my_alternate_server_host\" my_conn:   server_type: mysql   description: Private MySQL database   connection:     Server: \"my_alternate_server_host\""},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"browsing-the-connection-cache","dir":"Articles","previous_headings":"","what":"Browsing the connection cache","title":"Managing Connections","text":"connect() called, may inspect created connections connection_info().","code":"connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  FALSE   RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  TRUE    RSQLi… NA       FALSE"},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"accessing-individual-connections","dir":"Articles","previous_headings":"","what":"Accessing individual connections","title":"Managing Connections","text":"Connections may accessed name, live_connection()","code":"myconn <- live_connection(\"simple_sqlite\") myconn #> <SQLiteConnection> #>   Path:  #>   Extensions: TRUE"},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"the-default-connection","dir":"Articles","previous_headings":"","what":"The default connection","title":"Managing Connections","text":"first connection file highest precedence (.e. last one read) becomes default default. connection used whenever queries files SQL executed (runqueries() runfiles()) without explicitly stating connection use. can check default connection connection_info() get_default_conn_name() change set_default_conn_name(). last - combining get_default_conn_name() live_connection() obtain default connection - common enough warrant convenience function, default_conn().","code":"get_default_conn_name() #> [1] \"simple_sqlite\"  set_default_conn_name(\"pool_sqlite\")  get_default_conn_name() #> [1] \"pool_sqlite\"  get_default_conn_name() |>   live_connection() #> <Pool> of SQLiteConnection objects #>   Objects checked out: 0 #>   Available in pool: 1 #>   Max size: Inf #>   Valid: TRUE"},{"path":"https://majerr.github.io/sqlhelper/articles/connections.html","id":"checking-closing-and-re-opening-connections","dir":"Articles","previous_headings":"","what":"Checking, closing and re-opening connections","title":"Managing Connections","text":"can check whether connections live two ways: connection_info() provides ‘live’ field interactive use functions is_connected() not_connected() intended programmatic use. close connections remove internal cache, use disconnect(). Individual connections may closed DBI::dbDisconnect(). connect() closes open connections reading config files.","code":"conn_name <- \"simple_sqlite\"  is_connected(conn_name) #> [1] TRUE connection_info(conn_name)$live #> [1] TRUE  myconn <- live_connection(conn_name) DBI::dbDisconnect(myconn)  connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  TRUE    RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… FALSE FALSE   RSQLi… NA       FALSE  if(not_connected(conn_name)){   message(glue::glue(\"{conn_name} is not available, reconnecting...\"))   connect(\"examples/sqlhelper_db_conf.yml\", exclusive = TRUE) } #> simple_sqlite is not available, reconnecting...  connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  FALSE   RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  TRUE    RSQLi… NA       FALSE  disconnect()  connection_info() #> NULL"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"executing-sql-files","dir":"Articles","previous_headings":"","what":"Executing SQL files","title":"Executing SQL","text":"Executing SQL code requires connection database, sqlhelper provides ways automate creating managing connections. described vignette(\"connections\"). connections configured, run_files() command can used execute files SQL code. well individual file names, run_files() accepts vector file names.","code":"library(sqlhelper) connect(\"examples/sqlhelper_db_conf.yml\", exclusive = TRUE) DBI::dbWriteTable( default_conn(), name = \"IRIS\", iris)  readLines(\"examples/example.sql\") |> writeLines() #> -- qname = how_many_irises #> SELECT count(*) as N FROM IRIS; #>  #> -- qname = short_petal_setosa #> select Species, `Petal.Length` #> FROM IRIS #> WHERE Species = \"setosa\" #> AND `Petal.Length` < {petal_length}  petal_length <- 1.3  results <- run_files(\"examples/example.sql\")  results #> $how_many_irises #>     N #> 1 150 #>  #> $short_petal_setosa #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.2 #> 3  setosa          1.0 #> 4  setosa          1.2"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"accessing-results-of-queries","dir":"Articles","previous_headings":"Executing SQL files","what":"Accessing results of queries","title":"Executing SQL","text":"run_files() returns list results length number queries. example, names assigned queries interpreted comments, form -- qname = my_query_name. queries named, individual results can accessed name: Results returned list may also accessed index, course. However, file contains single query, result query returned , (.e. object, single element list). Beware usual gotchas around list names. sqlhelper complain give two queries name, try access results name, get result first query name. particularly relevant project executes queries multiple files files developed different people. Similarly, careful use anything query names R interpret operator special character. example, naming query short-petal-setosa cause error R interpret - subtraction.","code":"results$short_petal_setosa #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.2 #> 3  setosa          1.0 #> 4  setosa          1.2"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"controlling-execution-of-individual-queries","dir":"Articles","previous_headings":"Executing SQL files","what":"Controlling execution of individual queries","title":"Executing SQL","text":"well naming queries, interpreted comments can used control aspects execution per-query basis. example, queries executed DBI::dbGetQuery() default, sqlite complain use send statement database. can control execution function execmethod keyword: interpreted comments follow form -- <keyword> = <value>. Interpretable keywords : qname name query interpolate “yes” “” - query parameterized? quotesql “yes” “” - interpolated characters quoted? execmethod One “get”, “execute”, “sendq”, “sends” “spatial” - method used execute query? “get” means DBI::dbGetQuery(); “execute” means DBI::dbExecute(); “sendq” means DBI::dbSendQuery(); “sends” means DBI::dbSendStatement(); “spatial” means sf::st_read(). geometry name spatial column. Ignored execmethod ‘spatial’ conn_name name connection execute query ","code":"-- qname = bobby_tables -- execmethod = sendq DROP TABLE Students; ## add combined standard/spatial example"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"cascade","dir":"Articles","previous_headings":"Executing SQL files > Controlling execution of individual queries","what":"Cascaded execution parameters","title":"Executing SQL","text":"interpreted comments except qname cascaded within file, meaning want use values throughout, need set first query. See also read_sql() details. want change execution parameters first query retain defaults remainder need either: use interpreted comments explicitly reset defaults second query; put second subsequent queries different file. can prevent cascading passing cascade = FALSE.","code":"## cascaded comments example"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"interpolation","dir":"Articles","previous_headings":"Executing SQL files","what":"Interpolation","title":"Executing SQL","text":"default, sqlhelper attempt parameterize SQL queries glue::glue_sql() using values current environment. means values R can easily inserted SQL code, calculated situ: Interpolation behaviour can controlled using keywords interpolate quotesql, values parameter prepare_sql() (can also passed run_files() run_queries()). default behaviour quote SQL strings (.e. interpolate glue::glue_sql()); desired can avoided -- quotesql = (individual query file; see ‘cascaded comments’ example, ) passing quotesql = \"\" parameter run_files() (queries). strings quoted inserted bare; whilst occasionally useful, great care taken sanitize interpolated values. want skip interpolation individual query, precede -- interplate = . want skip interpolation altogether, pass interpolate = \"\" parameter see also ‘cascaded comments’ example, .","code":"readLines(\"examples/petal_length_params.sql\") |>   writeLines() #> -- qname = short_petal_setosa #> select Species, `Petal.Length` #> FROM IRIS #> WHERE Species = \"setosa\" #> AND `Petal.Length` < {petal_length}; #>  #> -- qname = setosa_petal_1sd_below #> select Species, `Petal.Length` #> FROM IRIS #> WHERE Species = \"setosa\" #> AND `Petal.Length` < { #>   mean(iris$Petal.Length[iris$Species == \"setosa\"]) #>     -  sd(iris$Petal.Length[iris$Species == \"setosa\"]) #> }  petal_length = 1.2  run_files(\"examples/petal_length_params.sql\") #> $short_petal_setosa #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.0 #>  #> $setosa_petal_1sd_below #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.2 #> 3  setosa          1.0 #> 4  setosa          1.2"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"values","dir":"Articles","previous_headings":"Executing SQL files > Interpolation","what":"Passing parameter values","title":"Executing SQL","text":"Sometimes may need parameterize SQL values calling environment. particularly important executing SQL code within package: rely , risk writing , users’ globalenv(). supply interpolation values run_files() run_queries(), pass populated environment values parameter.","code":"# reusing the petal length parameter example # A user may have a petal_length parameter in the globalenv already print(petal_length) #> [1] 1.2 result_from_globalenv <-   run_files(\"examples/petal_length_params.sql\") result_from_globalenv$short_petal_setosa #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.0  # a bespoke environment can provide a specific set of values for interpolation my_values <- new.env() my_values$petal_length <- 1.4 result_from_my_values <-   run_files(\"examples/petal_length_params.sql\", values = my_values) result_from_my_values$short_petal_setosa #>    Species Petal.Length #> 1   setosa          1.3 #> 2   setosa          1.1 #> 3   setosa          1.2 #> 4   setosa          1.3 #> 5   setosa          1.0 #> 6   setosa          1.2 #> 7   setosa          1.3 #> 8   setosa          1.3 #> 9   setosa          1.3 #> 10  setosa          1.3 #> 11  setosa          1.3"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"binding","dir":"Articles","previous_headings":"Executing SQL files","what":"Binding","title":"Executing SQL","text":"Binding can performed alongside interpolation. Queries statements first interpolated executed DBI::dbSendQuery() DBI::dbSendStatement(). may bound result fetched.","code":"readLines(\"examples/binding.SQL\") |>   writeLines() #> -- execmethod = sendq #> -- qname = binding_example #> SELECT species, [Petal.Width] #> FROM IRIS #> WHERE SPECIES = ? AND #> [Petal.Width] < {petal_width};  petal_width <- 0.2  result <- run_files(\"examples/binding.SQL\")  DBI::dbBind(result$binding_example, list(\"setosa\"))  DBI::dbFetch(result$binding_example) #>   Species Petal.Width #> 1  setosa         0.1 #> 2  setosa         0.1 #> 3  setosa         0.1 #> 4  setosa         0.1 #> 5  setosa         0.1  DBI::dbClearResult(result$binding_example)"},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"reading-and-preparing-sql-files","dir":"Articles","previous_headings":"","what":"Reading and preparing SQL files","title":"Executing SQL","text":"SQL files strings can read prepared without executed read_sql() prepare_sql() functions. functions return tibbles containing prepared SQL, associated metadata (e.g. filename), execution parameters. functions enable inspection prepared SQL parameters debugging, manipulation SQL queries prior execution.","code":""},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"executing-sql-strings","dir":"Articles","previous_headings":"","what":"Executing SQL strings","title":"Executing SQL","text":"One main objectives sqlhelper reduce incidence SQL written strings R code. However, occasionally convenient interactive exploratory work type query string. may use run_queries(). function can also used execute queries read files (e.g. read_sql()) manipulated programmatically execution.","code":""},{"path":"https://majerr.github.io/sqlhelper/articles/execution.html","id":"passing-ad-hoc-connections-to-functions","dir":"Articles","previous_headings":"","what":"Passing ad-hoc connections to functions","title":"Executing SQL","text":"may always possible desirable sqlhelper manage database connections. example, use secrets yet supported sqlhelper connections. cases, connections created outside sqlhelper may passed run_files() run_queries().","code":"con <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")  cars <- mtcars cars$model <- row.names(mtcars) DBI::dbWriteTable(con, \"cars\", cars)  minmpg = 30  run_queries(\"SELECT model, mpg, cyl FROM CARS WHERE mpg >= {minmpg}\",             default.conn = con) #>            model  mpg cyl #> 1       Fiat 128 32.4   4 #> 2    Honda Civic 30.4   4 #> 3 Toyota Corolla 33.9   4 #> 4   Lotus Europa 30.4   4"},{"path":"https://majerr.github.io/sqlhelper/articles/sqlhelper.html","id":"connections","dir":"Articles","previous_headings":"","what":"Connections","title":"sqlhelper","text":"can execute SQL need connections databases want use. Either define (e.g. using DBI::dbConnect()), place specifications yaml file use connect(): vignette(\"connections\") connect() describe detail specify manage connections. particular, note sqlhelper defines configuration search path. means tend connect databases every session, can avoid supplying file names placing yaml files search path. Similarly, database admin can supply connections analysts placing file site-wide directory search path.","code":"library(sqlhelper)  conf_fn <- \"examples/sqlhelper_db_conf.yml\"  readLines(conf_fn) |>   writeLines() #> #### sqlhelper_db_conf.yml #### #>  #> simple_sqlite: #>   driver_type: sqlite #>   description: \"A simple connection to an in-memory database\" #>   connection: #>     Server: \":memory:\" #>  #> pool_sqlite: #>   driver_type: sqlite #>   pool: yes #>   description: \"A pooled connection to an in-memory database\" #>   connection: #>     Server: \":memory:\"  connect(conf_fn)"},{"path":"https://majerr.github.io/sqlhelper/articles/sqlhelper.html","id":"executing-files","dir":"Articles","previous_headings":"","what":"Executing files","title":"sqlhelper","text":"sqlhelper’s principal function run_files(); use execute files list files. used connect() set connections can simply pass file names run_files(). example illustrates two key aspects run_files(). Queries can parameterized using familiar glue::glue_sql() syntax, queries can named using interpreted comments easier access results. aspects execution can also controlled using interpreted comments; run_files() vignette(\"execution\") describe detail.","code":"# Write iris to sqlhelper's default connection DBI::dbWriteTable(default_conn(), name = \"IRIS\", value = iris)  # write some queries in a .sql file file_to_run <- \"examples/example.sql\"  readLines(file_to_run) |> writeLines() #> -- qname = how_many_irises #> SELECT count(*) as N FROM IRIS; #>  #> -- qname = short_petal_setosa #> select Species, `Petal.Length` #> FROM IRIS #> WHERE Species = \"setosa\" #> AND `Petal.Length` < {petal_length}  #Define a parameter petal_length <- 1.3  # Run the queries and save the results results <- run_files(file_to_run)  # Inspect the results. By default, run_files() returns a list of the results of  # each query in the files you provided. Results of a specific query can be accessed by the # the name of the query. See the article 'Executing SQL' for more on named queries. results #> $how_many_irises #>     N #> 1 150 #>  #> $short_petal_setosa #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.2 #> 3  setosa          1.0 #> 4  setosa          1.2  results$short_petal_setosa #>   Species Petal.Length #> 1  setosa          1.1 #> 2  setosa          1.2 #> 3  setosa          1.0 #> 4  setosa          1.2"},{"path":"https://majerr.github.io/sqlhelper/articles/sqlhelper.html","id":"executing-queries","dir":"Articles","previous_headings":"","what":"Executing queries","title":"sqlhelper","text":"exploratory work might just want run short queries interactively. Use function run_queries() . run_queries() vignette(\"execution\") describe detail options running individual queries.","code":"# write some queries my_queries <- c(    showtabs = \"SELECT name FROM sqlite_schema WHERE type ='table' AND name NOT LIKE 'sqlite_%'\",   how_many_irises = \"select count(*) from iris\" )  # Run the queries and save the results results <- run_queries(my_queries)  # Inspect the results. runqueries() returns a list with one element per query. # You can access them using the names of the queries: results$showtabs #>   name #> 1 IRIS  results$how_many_irises #>   count(*) #> 1      150"},{"path":"https://majerr.github.io/sqlhelper/articles/sqlhelper.html","id":"preparing-queries","dir":"Articles","previous_headings":"","what":"Preparing queries","title":"sqlhelper","text":"Prior execution, run_files() reads prepares SQL files using functions read_sql() prepare_sql() respectively. functions can also used isolation read /prepare SQL execution without actually executing . can useful need paramaterize SQL differently (example using DBI::dbBind()), need debug parameterized SQL.","code":""},{"path":"https://majerr.github.io/sqlhelper/articles/use_case.html","id":"connections","dir":"Articles","previous_headings":"","what":"Connections","title":"Using sqlhelper in packages","text":"one connection needed project, easiest approach define yaml file described vignette(\"connections\"). yaml file placed inst root package accessed devtools::system.file() (see r-pkgs using installed files). Connections defined way may defined within package. handled depend considerations long connection needed , widely need shared package components, whether need exposed users. connection needed may used closed execution single function may sufficient define within namespace function close function exits, example: connection needs shared across functions function calls, exposed users, may stored environment package’s top-level namespace, example: (approach fact less one take sqlhelper )","code":"sqlhelper::connect(      system.file( \"sqlhelper_connection_conf.yml\" ),     exclusive=TRUE ) get_some_data <- function(){   conn <- DBI::dbConnect(a_driver, \"a connection string\")   d <- sqlhelper::run_files(            system.file(\"SQL/my_sql_file.SQL\"),           default.conn = conn         )        DBI::dbDisconnect(conn)   d } assign(\"connection_store\",        new.env(parent = emptyenv()),        environment())         connect <- function(){   assign(     \"c1\",      DBI::dbConnect(a_driver, \"a connection string\"),      envir = connection_store   ) }  get_some_data <- function(){   sqlhelper::run_files(            system.file(\"SQL/my_sql_file.SQL\"),           default.conn = connection_store$c1         ) }  # This is a bit belt-and-braces, but thorough. disconnect <- function(){   DBI::dbDisconnect(connection_store$c1)   connection_store$c1 <- NULL   rm(list=c(\"c1), envir=connection_store) }"},{"path":"https://majerr.github.io/sqlhelper/articles/use_case.html","id":"sql-files","dir":"Articles","previous_headings":"","what":"SQL files","title":"Using sqlhelper in packages","text":"multiple connections required defined yaml somewhat diminish ability control execution query--query basis may produce need split queries files otherwise necessary. mf package contains many SQL files, may useful store SQL directory inst/. may accessed way, system.file(), either system.file(\"SQL\", \"file_name.SQL\") system.file(\"SQL/file_name.SQL\") (latter may somewhat less portable). often convenient define SQL parameters different scope calling scope run_files(). case important ensure package interfere user’s global environment. easiest way store environment (e.g. way illustrated connections, ) pass values parameter run_files(), run_queries() prepare_sql(). See run_queries() vignette(\"execution\") examples.","code":""},{"path":"https://majerr.github.io/sqlhelper/articles/use_case.html","id":"exit","dir":"Articles","previous_headings":"","what":"Exit","title":"Using sqlhelper in packages","text":"may desirable close sqlhelper’s connections calling package completed ’s operations. can achieved easily sqlhelper::disconnect().","code":""},{"path":"https://majerr.github.io/sqlhelper/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Roberts. Author, maintainer, copyright holder.","code":""},{"path":"https://majerr.github.io/sqlhelper/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Roberts M (2024). sqlhelper: Easier 'SQL' Integration. R package version 0.2.1, https://github.com/majerr/sqlhelper/, https://majerr.github.io/sqlhelper/dev/.","code":"@Manual{,   title = {sqlhelper: Easier 'SQL' Integration},   author = {Matthew Roberts},   year = {2024},   note = {R package version 0.2.1, https://github.com/majerr/sqlhelper/},   url = {https://majerr.github.io/sqlhelper/dev/}, }"},{"path":"https://majerr.github.io/sqlhelper/index.html","id":"sqlhelper","dir":"","previous_headings":"","what":"Easier SQL integration with R","title":"Easier SQL integration with R","text":"Easier SQL integration R","code":""},{"path":"https://majerr.github.io/sqlhelper/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Easier SQL integration with R","text":"sqlhelper facilitates preparing executing files SQL code R. particular, sqlhelper two things. : provides functions preparing executing files sql queries; provides functions manage multiple RDBMS connections. sqlhelper defines number functions, many also exported convenience. , course, many excellent ways interact database R, often involving SQL (e.g. dbplyr); sqlhelper times want use SQL - perhaps inherited legacy SQL, need specific functionality offered RDBMS, simply prefer write SQL. article vignette(\"use-case\") describes setup specific motivating case.","code":""},{"path":"https://majerr.github.io/sqlhelper/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easier SQL integration with R","text":"stable version sqlhelper yet released. current development version prepared submission CRAN. Pending acceptance, future stable version available CRAN: Alternatively, can install development versions github:","code":"install.packages(\"sqlhelper\") # install.packages(\"devtools\")  devtools::install_github(\"majerr/sqlhelper@dev\")"},{"path":"https://majerr.github.io/sqlhelper/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Easier SQL integration with R","text":"Basic functionality described vignette(\"sqlhelper\") Execution SQL files described detail vignette(\"execution\") Setup management database connections described vignette(\"connections\") details using sqlhelper within packages vignette(\"use_case\")","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/config_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Examples of yaml configurations for database connections — config_examples","title":"Examples of yaml configurations for database connections — config_examples","text":"Provides example configurations several databases range options","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/config_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examples of yaml configurations for database connections — config_examples","text":"","code":"config_examples(filename = NA)"},{"path":"https://majerr.github.io/sqlhelper/reference/config_examples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examples of yaml configurations for database connections — config_examples","text":"filename string. supplied, examples written file name.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/config_examples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examples of yaml configurations for database connections — config_examples","text":"yaml string database configuration examples, invisibly.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/config_examples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Examples of yaml configurations for database connections — config_examples","text":"Irrespective whether filename supplied, yaml configuration examples returned invisibly single string printed session interactive.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/config_examples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examples of yaml configurations for database connections — config_examples","text":"","code":"config_examples() #> [1] \"sqlite_simple:\\n  driver_type: sqlite\\n  connection:\\n    Server: \\\":memory:\\\"\\n\\nsqlite_pool:\\n  driver_type: sqlite\\n  pool: yes\\n  connection:\\n    Server: \\\":memory:\\\"\\n\\nsqlserver_simple:\\n  driver_type: sqlserver\\n  description: >\\n    A one line description to remind you what this server is for\\n  connection:\\n    Driver: \\\"{ODBC Driver 17 for SQL Server}\\\" # See https://connectionstrings.com for other examples\\n    Server: \\\"the_server_hostname\\\"\\n    Trusted_Connection: \\\"yes\\\"\"  if (FALSE) { # write the examples to a file called 'examples.yml' config_examples(\"examples.yml\") }"},{"path":"https://majerr.github.io/sqlhelper/reference/connect.html","id":null,"dir":"Reference","previous_headings":"","what":"(Re-)Establish connections to databases — connect","title":"(Re-)Establish connections to databases — connect","text":"Closes open connections, reads config files directed config_filename exclusive, creates new connections descriptions files.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Re-)Establish connections to databases — connect","text":"","code":"connect(config_filename = NA, exclusive = FALSE)"},{"path":"https://majerr.github.io/sqlhelper/reference/connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Re-)Establish connections to databases — connect","text":"config_filename String. full name path configuration file, \"site\", \"user\", \"example\", NA (default). NA exclusive = TRUE. exclusive Logical. TRUE, file named config_filename treated config file. Site user level files read. parameter ignored config_filename missing.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Re-)Establish connections to databases — connect","text":"NULL, invisibly","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Re-)Establish connections to databases — connect","text":"exclusive=FALSE (default), configuration files sought directory returned rappdirs::site_config_dir(), directory returned rappdirs::user_config_dir(), finally file named config_filename (NA). elements files conflict, later files overwrite elements earlier files. exclusive=TRUE, 1 file, indicated config_filename parameter,  read. config_filename = \"site\", config file called sqlhelper_db_conf.yml sought directory returned rappdirs::site_config_dir() config_filename = \"user\", config file called sqlhelper_db_conf.yml sought directory returned rappdirs::user_config_dir() config_filename NULL (\"site\" \"user\"), assumed name file. warning raised valid configurations found (e.g. connect() called without arguments site- user-wide files present, connections files invalid) vignette(\"connections\") explains write config file access created connections.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Re-)Establish connections to databases — connect","text":"","code":"library(sqlhelper)  example_filename <- system.file(\"examples\",                                 \"sqlhelper_db_conf.yml\",                                 package = \"sqlhelper\")  # Search for config files in rappdirs::site_config_dir(), # rappdirs::user_config_dir(), and read from example_filename connect(example_filename)  # Read only the named example file connect(example_filename, exclusive=TRUE)"},{"path":"https://majerr.github.io/sqlhelper/reference/connection_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse available connections — connection_info","title":"Browse available connections — connection_info","text":"Provides information created connections.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connection_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse available connections — connection_info","text":"","code":"connection_info(name_str = \".*\", exact = TRUE)"},{"path":"https://majerr.github.io/sqlhelper/reference/connection_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Browse available connections — connection_info","text":"name_str regular expression used identify connection names include. default ('.*') returns . exact TRUE FALSE. name_str match name connection exactly? TRUE identify 1 connection name_str contain metacharacters","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connection_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse available connections — connection_info","text":"Null, tibble 1 row per identified connection following fields: name identifier (character) description description connection, found conf file (character) live connection valid live? (logical) driver name driver function (character) conn_str string used parameterize connection (character) pool pool connection? (logical) connection names matched name_str, tibble empty. connections configured (e.g. connect() called), NULL returned.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/connection_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse available connections — connection_info","text":"","code":"library(sqlhelper)  connect(     system.file(         \"examples/sqlhelper_db_conf.yml\",         package=\"sqlhelper\"         ),     exclusive=TRUE    )   connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  FALSE   RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  TRUE    RSQLi… NA       FALSE   connection_info(\"pool_sqlite\") #> # A tibble: 1 × 7 #>   name        description                    live  default driver conn_str pool  #>   <chr>       <chr>                          <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite A pooled connection to an in-… TRUE  FALSE   RSQLi… NA       TRUE"},{"path":"https://majerr.github.io/sqlhelper/reference/default_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the default connection — default_conn","title":"Return the default connection — default_conn","text":"convenience wrapper around live_connection() get_default_conn_name()","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/default_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the default connection — default_conn","text":"","code":"default_conn()"},{"path":"https://majerr.github.io/sqlhelper/reference/default_conn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the default connection — default_conn","text":"database connection returned DBI::dbConnect() pool::dbPool()","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/default_conn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the default connection — default_conn","text":"","code":"library(sqlhelper)  connect(     system.file(         \"examples/sqlhelper_db_conf.yml\",         package=\"sqlhelper\"         ),     exclusive=TRUE    )  default_conn() #> <SQLiteConnection> #>   Path:  #>   Extensions: TRUE"},{"path":"https://majerr.github.io/sqlhelper/reference/disconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Close all connections and remove them from the connections cache — disconnect","title":"Close all connections and remove them from the connections cache — disconnect","text":"Close connections remove connections cache","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/disconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close all connections and remove them from the connections cache — disconnect","text":"","code":"disconnect()"},{"path":"https://majerr.github.io/sqlhelper/reference/disconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Close all connections and remove them from the connections cache — disconnect","text":"NULL, invisibly","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/disconnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close all connections and remove them from the connections cache — disconnect","text":"","code":"library(sqlhelper) connect(   system.file(\"examples\",               \"sqlhelper_db_conf.yml\",               package=\"sqlhelper\") ) disconnect()"},{"path":"https://majerr.github.io/sqlhelper/reference/is_connected.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether a database is connected — is_connected","title":"Test whether a database is connected — is_connected","text":"Test whether database connected","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/is_connected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether a database is connected — is_connected","text":"","code":"is_connected(conn_name)  not_connected(conn_name)"},{"path":"https://majerr.github.io/sqlhelper/reference/is_connected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether a database is connected — is_connected","text":"conn_name Character. name connection (run connection_info() options)","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/is_connected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether a database is connected — is_connected","text":"Logical, NULL conn_name identify exactly 1 connection","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/is_connected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether a database is connected — is_connected","text":"","code":"library(sqlhelper)  connect(   system.file(\"examples/sqlhelper_db_conf.yml\",               package=\"sqlhelper\") ) connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  FALSE   RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  TRUE    RSQLi… NA       FALSE  is_connected(\"simple_sqlite\") #> [1] TRUE is_connected(\"foo\") #> NULL DBI::dbDisconnect(live_connection(\"simple_sqlite\")) is_connected(\"simple_sqlite\") #> [1] FALSE not_connected(\"simple_sqlite\") #> [1] TRUE disconnect() is_connected(\"simple_sqlite\") #> NULL not_connected(\"simple_sqlite\") #> NULL"},{"path":"https://majerr.github.io/sqlhelper/reference/live_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the named connection or NULL — live_connection","title":"Return the named connection or NULL — live_connection","text":"Return named connection NULL","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/live_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the named connection or NULL — live_connection","text":"","code":"live_connection(conn_name)"},{"path":"https://majerr.github.io/sqlhelper/reference/live_connection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the named connection or NULL — live_connection","text":"conn_name Chr. name live connection want (use connection_info get names available connections).","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/live_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the named connection or NULL — live_connection","text":"live connection database, NULL, invisibly, conn_name name live connection","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/live_connection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the named connection or NULL — live_connection","text":"","code":"library(sqlhelper) connect(   system.file(\"examples/sqlhelper_db_conf.yml\",               package=\"sqlhelper\") ) connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  FALSE   RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  TRUE    RSQLi… NA       FALSE  conn <- live_connection(\"simple_sqlite\") conn #> <SQLiteConnection> #>   Path:  #>   Extensions: TRUE  DBI::dbDisconnect(conn) is.null(live_connection(\"simple_sqlite\")) #> [1] TRUE is.null(live_connection(\"foo\")) #> [1] TRUE"},{"path":"https://majerr.github.io/sqlhelper/reference/prepare_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare queries and assemble meta data prior to execution — prepare_sql","title":"prepare queries and assemble meta data prior to execution — prepare_sql","text":"Except sql, parameters default values used none supplied sql (.e. sql tibble returned read_sql()).","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/prepare_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare queries and assemble meta data prior to execution — prepare_sql","text":"","code":"prepare_sql(   sql,   quotesql = \"yes\",   values = parent.frame(),   execmethod = \"get\",   geometry = NA,   default.conn = default_conn() )"},{"path":"https://majerr.github.io/sqlhelper/reference/prepare_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare queries and assemble meta data prior to execution — prepare_sql","text":"sql optionally-named list character vector containing sql commands, tibble returned read_sql() quotesql \"yes\" \"\" - interpolated characters quoted default? Anything \"\" treated \"yes\". values environment containing variables interpolate SQL. Pass object environment (commonly-used options include \"\", NA, FALSE NULL) interpolation skipped, another environment containing values interpolate avoid using .GlobalEnv. execmethod One \"get\", \"execute\", \"sendq\", \"sends\" \"spatial\" - method used execute query? \"get\" means DBI::dbGetQuery(); \"execute\" means DBI::dbExecute(); \"sendq\" means DBI::dbSendQuery; \"sends\" means DBI::dbSendStatement(); \"spatial\" means sf::st_read(). geometry execmethod \"spatial\", column contains geometry? Ignored execmethod \"spatial\". default.conn Either name sqlhelper connection, database connection returned DBI::dbConnect() pool::pool(), NA. connection used glue::glue_sql() quote SQL interpolations; prepare_sql() execute SQL code.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/prepare_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare queries and assemble meta data prior to execution — prepare_sql","text":"tibble containing 1 row per query following fields: qname character. name query quotesql \"yes\" \"\". parameterized character values quoted query? interpolate \"yes\" \"\". query parameterized values R? execmethod method execute query. One \"get\" (DBI::dbGetQuery()), \"execute\" (DBI::dbExecute()), \"sendq\" (DBI::dbSendQuery()), \"sends\" (DBI::dbSendStatement()) \"spatial\" (sf::st_read()) geometry character. execmethod \"spatial\", geometry column? conn_name character. name database connection use query. Must name configured sqlhelper connection. sql sql query entered filename value file_name prepared_sql sql query executed, .e. interpolations quoting place","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/prepare_sql.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"prepare queries and assemble meta data prior to execution — prepare_sql","text":"default.conn parameter may used supply connection object configured sqlhelper connection can used interpolate quoted strings.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/prepare_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prepare queries and assemble meta data prior to execution — prepare_sql","text":"","code":"library(sqlhelper) connect(     system.file(\"examples/sqlhelper_db_conf.yml\",                 package=\"sqlhelper\"),     exclusive = TRUE )  n <- 5 foo <- 'bar' prepped <- prepare_sql(c(\"select {`foo`}\", \"select {n}\")) prepped #> # A tibble: 2 × 9 #>   qname quotesql interpolate execmethod geometry conn_name sql          filename #>   <chr> <chr>    <chr>       <chr>      <chr>    <chr>     <chr>        <chr>    #> 1 NA    yes      yes         get        NA       default   select {`fo… NA       #> 2 NA    yes      yes         get        NA       default   select {n}   NA       #> # ℹ 1 more variable: prepared_sql <list> prepped$prepared_sql #> [[1]] #> <SQL> select `bar` #>  #> [[2]] #> <SQL> select 5 #>"},{"path":"https://majerr.github.io/sqlhelper/reference/read_sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a sql file and return it's contents as a tibble — read_sql","title":"Read a sql file and return it's contents as a tibble — read_sql","text":"Read sql file return contents tibble","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/read_sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a sql file and return it's contents as a tibble — read_sql","text":"","code":"read_sql(file_name, cascade = TRUE)"},{"path":"https://majerr.github.io/sqlhelper/reference/read_sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a sql file and return it's contents as a tibble — read_sql","text":"file_name Full name path file read cascade Parameters executing query may specified comments SQL file. cascade=TRUE, execution parameters specified file cascaded subsequent queries parameter specified. enables set parameter (e.g. connection name) , first query file, use subsequent queries.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/read_sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a sql file and return it's contents as a tibble — read_sql","text":"tibble containing 1 row per query following fields: qname character. name query quotesql \"yes\" \"\". parameterized character values quoted query? interpolate \"yes\" \"\". query parameterized values R? execmethod method execute query. One \"get\" (DBI::dbGetQuery()), \"execute\" (DBI::dbExecute()), \"sendq\" (DBI::dbSendQuery()), \"sends\" (DBI::dbSendStatement()) \"spatial\" (sf::st_read()) geometry character. execmethod \"spatial\", geometry column? conn_name character. name database connection use query. Must name configured sqlhelper connection. sql sql query executed filename value file_name","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/read_sql.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a sql file and return it's contents as a tibble — read_sql","text":"Multiple SQL queries files terminated semi-colons (;), usual. values qname, quotesql, interpolate, execmethod, geometry, conn_name output may specified comments immediately preceding query (see examples). exception qname, value interpreted comment cascaded subsequent queries (assuming cascade=TRUE). means may set values first query file apply queries thereafter. See run_queries() implications setting execution parameters. See prepare_sql() treatment missing values output defaults. article vignette(\"execution\") examples using parameters control execution.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/read_sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a sql file and return it's contents as a tibble — read_sql","text":"","code":"library(sqlhelper)  fn <- system.file( \"examples/read_sql_execution_params.SQL\",                    package=\"sqlhelper\" ) readLines( fn ) |> writeLines() #> -- qname = create_setosa_table #> -- execmethod = execute #> -- conn_name = sqlite_simple #> CREATE TABLE iris_setosa as SELECT * FROM IRIS WHERE SPECIES = 'setosa'; #>  #> -- qname = get_setosa_table #> -- execmethod = get #> -- conn_name = sqlite_simple #> SELECT * FROM iris_setosa;  sql_tibble <- read_sql(fn) sql_tibble #> # A tibble: 2 × 8 #>   qname        quotesql interpolate execmethod geometry conn_name sql   filename #>   <chr>        <chr>    <chr>       <chr>      <chr>    <chr>     <chr> <chr>    #> 1 create_seto… NA       NA          execute    NA       sqlite_s… CREA… read_sq… #> 2 get_setosa_… NA       NA          get        NA       sqlite_s… SELE… read_sq… sql_tibble$sql #> [1] \"CREATE TABLE iris_setosa as SELECT * FROM IRIS WHERE SPECIES = 'setosa'\" #> [2] \"SELECT * FROM iris_setosa\"                                                fn <- system.file( \"examples/read_sql_comments.SQL\", package=\"sqlhelper\" ) readLines( fn ) |> writeLines() #> -- Run some queries against the newly-created iris table #>  #>  #> -- conn_name = simple_sqlite #> -- ------------------------------------------------------------ #>  #> -- what tables have we got? #> -- qname = showtabs #> SELECT name FROM #>  #> /* a multi- #> line comment in the #> middle of the #> block*/ #>  #> sqlite_schema WHERE type='table'; #>  #> -- ------------------------------------------------------------ #>  #> -- qname=sample #> select * -- with a comment on a code line #> -- and another on a line by itself in the middle of a block #> from iris limit 10; #>  #> /* a multi- #> line comment at #> the end of the #> block*/ #>  #> -- ------------------------------------------------------------ #> -- spaces are allowed in interpreted comments #> -- conn_name = pool_sqlite #> -- execmethod = spatial #> -- geometry = myString #> -- make sure quoted double dashes survive the comment strip #> -- qname=quoted_doubledash #> select #> 'stringvar' as myString #> from iris #> where 'foo' = '-- oops'; #>  #> /* a single-line block comment */ #>  #> -- ------------------------------------------------------------ #>  #> -- make sure quoted block comments survive the comment strip #> -- 'conn_name', 'execmethod' and 'geometry' values can be #> -- cascaded from the previous query #> -- qname=quoted_block #> select #> 'stringvar' as myString #> from iris #> where 'foo' = ' /* KEEP ME! */ '; #>  #> -- ------------------------------------------------------------ #>  #>  #> -- a few single #> -- line comments at the #> -- very end  sql_tibble <- read_sql(fn) sql_tibble #> # A tibble: 4 × 8 #>   qname        quotesql interpolate execmethod geometry conn_name sql   filename #>   <chr>        <chr>    <chr>       <chr>      <chr>    <chr>     <chr> <chr>    #> 1 showtabs     NA       NA          NA         NA       simple_s… SELE… read_sq… #> 2 sample       NA       NA          NA         NA       simple_s… sele… read_sq… #> 3 quoted_doub… NA       NA          spatial    myString pool_sql… sele… read_sq… #> 4 quoted_block NA       NA          spatial    myString pool_sql… sele… read_sq… sql_tibble$sql #> [1] \"SELECT name FROM sqlite_schema WHERE type='table'\"                         #> [2] \"select * from iris limit 10\"                                               #> [3] \"select 'stringvar' as myString from iris where 'foo' = '-- oops'\"          #> [4] \"select 'stringvar' as myString from iris where 'foo' = ' /* KEEP ME! */ '\""},{"path":"https://majerr.github.io/sqlhelper/reference/run_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Read, prepare and execute .SQL files — run_files","title":"Read, prepare and execute .SQL files — run_files","text":"Accepts character vector SQL file names attempts execute queries one.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/run_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read, prepare and execute .SQL files — run_files","text":"","code":"run_files(filenames, ..., include_params = FALSE)  runfiles(filenames, ..., include_params = FALSE)"},{"path":"https://majerr.github.io/sqlhelper/reference/run_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read, prepare and execute .SQL files — run_files","text":"filenames name, vector names, file(s) executed ... Arguments passed run_queries(), prepare_sql(), read_sql() include_params TRUE FALSE. parameters included output?","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/run_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read, prepare and execute .SQL files — run_files","text":"list results sql queries found files","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/run_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read, prepare and execute .SQL files — run_files","text":"default connection supplied via default.conn connections configured using connect(), attempt made configure connections via connect() using configuration search path. database connections available attempt, error raised. See vignette(\"connections\") details configuration search path. run_files() calls read_sql() file, prepare_sql() queries read files. Prepared queries executed run_queries(). behaviour functions can controlled passing relevant parameters run_files() ... argument. run_files() also enables control arguments accepted run_queries() per-query basis, interpreting comments SQL files described read_sql(). Interpreted comments precede sql query refer. interpretable comment must line take form:   Keywords possible values interpretable comments : qname name query quotesql \"yes\" \"\" - interpolated characters quoted? interpolate \"yes\" \"\" - sql interpolated? execmethod One \"get\", \"execute\", \"sendq\", \"sends\" \"spatial\" - method used execute query? \"get\" means DBI::dbGetQuery(); \"execute\" means DBI::dbExecute(); \"sendq\" means DBI::dbSendQuery; \"sends\" means DBI::dbSendStatement(); \"spatial\" means sf::st_read(). geometry name spatial column. Ignored execmethod 'spatial' conn_name name connection execute query interpreted comments except qname cascaded within file, meaning want use values throughout, need set first query. See read_sql() details.","code":"-- keyword = value"},{"path":[]},{"path":"https://majerr.github.io/sqlhelper/reference/run_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read, prepare and execute .SQL files — run_files","text":"","code":"library(sqlhelper)  config_filename <- system.file(\"examples/sqlhelper_db_conf.yml\",                 package=\"sqlhelper\")  readLines( config_filename ) |> writeLines() #> #### sqlhelper_db_conf.yml #### #>  #> simple_sqlite: #>   driver_type: sqlite #>   description: \"A simple connection to an in-memory database\" #>   connection: #>     Server: \":memory:\" #>  #> pool_sqlite: #>   driver_type: sqlite #>   pool: yes #>   description: \"A pooled connection to an in-memory database\" #>   connection: #>     Server: \":memory:\"  connect(     config_filename,     exclusive=TRUE)  DBI::dbWriteTable( default_conn(), \"iris\", iris)  sf::st_write(spData::congruent, default_conn(), \"congruent\") #> Note: method with signature ‘DBIObject#sf’ chosen for function ‘dbDataType’, #>  target signature ‘SQLiteConnection#sf’. #>  \"SQLiteConnection#ANY\" would also be valid sf::st_write(spData::incongruent, live_connection(\"pool_sqlite\"), \"incongruent\")  run_files_ex1 <- system.file(\"examples/run_files_ex1.sql\", package=\"sqlhelper\") readLines( run_files_ex1 ) |> writeLines() #> -- qname = how_many_irises #> SELECT count(*) as N FROM IRIS; #>  #> -- qname = n_longest_setosa_petal_lengths #> SELECT * #> FROM (SELECT * #>       FROM IRIS #>       WHERE Species = 'setosa' #>       ORDER BY [Petal.Length] DESC) #> LIMIT {n_longest_petals}  run_files_ex2 <- system.file(\"examples/run_files_ex2.sql\", package=\"sqlhelper\") readLines( run_files_ex2 ) |> writeLines() #> -- qname = get_congruent #> -- execmethod = spatial #> -- geometry = geometry #> select geometry from congruent; #>  #> -- qname = get_incongruent #> -- conn_name = pool_sqlite #> select geometry from incongruent;  n_longest_petals <- 5 results <- run_files( c( run_files_ex1, run_files_ex2 ) )  names(results) #> [1] \"how_many_irises\"                \"n_longest_setosa_petal_lengths\" #> [3] \"get_congruent\"                  \"get_incongruent\"                 results$how_many_irises #>     N #> 1 150  results$n_longest_setosa_petal_lengths #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          4.8         3.4          1.9         0.2  setosa #> 2          5.1         3.8          1.9         0.4  setosa #> 3          5.4         3.9          1.7         0.4  setosa #> 4          5.7         3.8          1.7         0.3  setosa #> 5          5.4         3.4          1.7         0.2  setosa  plot(results$get_congruent, border = \"orange\") plot(results$get_incongruent, border = \"blue\", add=TRUE)"},{"path":"https://majerr.github.io/sqlhelper/reference/run_queries.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a sequence of SQL queries — run_queries","title":"Execute a sequence of SQL queries — run_queries","text":"Accepts character vector SQL queries attempts execute ","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/run_queries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a sequence of SQL queries — run_queries","text":"","code":"run_queries(sql, ..., default.conn = default_conn(), include_params = FALSE)  runqueries(sql, ..., default.conn = default_conn(), include_params = FALSE)"},{"path":"https://majerr.github.io/sqlhelper/reference/run_queries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a sequence of SQL queries — run_queries","text":"sql optionally-named list character vector containing sql strings, tibble returned read_sql() prepare_sql(). ... Arguments passed read_sql() prepare_sql() default.conn Either name sqlhelper connection, database connection returned DBI::dbConnect() pool::dbPool(). connection used fall-back sql parameter tibble per-query connection name supplied, connection name default (see prepare_sql()). may used glue::glue_sql() interpolate SQL strings, connection execute SQL queries. include_params TRUE FALSE. parameters included output? Mainly useful debugging.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/run_queries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a sequence of SQL queries — run_queries","text":"include_params FALSE sql argument vector, list containing results query; element names taken sql argument. length sql argument 1 named, result query returned -(e.g. data.frame), 1-element list. include_params TRUE, tibble returned containing 1 row per query following fields: qname character. name query quotesql \"yes\" \"\". parameterized character values quoted query? interpolate \"yes\" \"\". query parameterized values R? execmethod method execute query. One \"get\" (DBI::dbGetQuery()), \"execute\" (DBI::dbExecute()), \"sendq\" (DBI::dbSendQuery()), \"sends\" (DBI::dbSendStatement()) \"spatial\" (sf::st_read()) geometry character. execmethod \"spatial\", name geometry column. conn_name character. name database connection execute query. Must name configured sqlhelper connection. sql sql query executed filename value file_name prepared_sql sql query executed, .e. interpolations quoting place result result query","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/run_queries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute a sequence of SQL queries — run_queries","text":"default connection supplied via default.conn connections configured using connect(), attempt made configure connections via connect() using configuration search path. database connections available attempt, error raised. See vignette(\"connections\") details configuration search path.","code":""},{"path":[]},{"path":"https://majerr.github.io/sqlhelper/reference/run_queries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a sequence of SQL queries — run_queries","text":"","code":"library(sqlhelper)  readLines(     system.file(\"examples/sqlhelper_db_conf.yml\",                 package=\"sqlhelper\")     ) |> writeLines() #> #### sqlhelper_db_conf.yml #### #>  #> simple_sqlite: #>   driver_type: sqlite #>   description: \"A simple connection to an in-memory database\" #>   connection: #>     Server: \":memory:\" #>  #> pool_sqlite: #>   driver_type: sqlite #>   pool: yes #>   description: \"A pooled connection to an in-memory database\" #>   connection: #>     Server: \":memory:\"  connect(     system.file(\"examples/sqlhelper_db_conf.yml\", package=\"sqlhelper\"),     exclusive=TRUE)  DBI::dbWriteTable( default_conn(),                   \"iris\",                   iris)  n <- 5  run_queries(     c(top_n = \"select * from iris limit {n}\",       uniqs = \"select distinct species as species from iris\") ) #> $top_n #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #>  #> $uniqs #>      species #> 1     setosa #> 2 versicolor #> 3  virginica #>   ## use include_params to review the execution context run_queries(     c(top_n = \"select * from iris limit {n}\",       uniqs = \"select distinct species as species from iris\"),    include_params = TRUE ) #> # A tibble: 2 × 10 #>   qname quotesql interpolate execmethod geometry conn_name sql          filename #>   <chr> <chr>    <chr>       <chr>      <chr>    <chr>     <chr>        <chr>    #> 1 top_n yes      yes         get        NA       default   select * fr… NA       #> 2 uniqs yes      yes         get        NA       default   select dist… NA       #> # ℹ 2 more variables: prepared_sql <list>, result <list>  ## pass an env of interpolation values to the 'values' parameter ## result of a single, unnamed query is returned as an object, not a ## 1-element list e <- new.env() e$n <- 2 run_queries(     \"select * from iris limit {n}\",     values = e ) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa  ## Use the execmethod parameter for statements run_queries(\"create table iris_setosa as select * from iris where species = 'setosa'\",           execmethod = 'execute') #> [1] 0  run_queries(\"select distinct species as species from iris_setosa\") #>   species #> 1  setosa"},{"path":"https://majerr.github.io/sqlhelper/reference/set_default_conn_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Set/get the name of the default connection to use — set_default_conn_name","title":"Set/get the name of the default connection to use — set_default_conn_name","text":"Set/get name default connection use","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/set_default_conn_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set/get the name of the default connection to use — set_default_conn_name","text":"","code":"set_default_conn_name(conn_name)  get_default_conn_name()"},{"path":"https://majerr.github.io/sqlhelper/reference/set_default_conn_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set/get the name of the default connection to use — set_default_conn_name","text":"conn_name Character string. name connection","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/set_default_conn_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set/get the name of the default connection to use — set_default_conn_name","text":"get returns name default connection; set returns NULL, invisibly.","code":""},{"path":"https://majerr.github.io/sqlhelper/reference/set_default_conn_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set/get the name of the default connection to use — set_default_conn_name","text":"","code":"library(sqlhelper) connect(     system.file(\"examples/sqlhelper_db_conf.yml\",                 package=\"sqlhelper\"),     exclusive = TRUE )  connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  FALSE   RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  TRUE    RSQLi… NA       FALSE  get_default_conn_name() #> [1] \"simple_sqlite\"  set_default_conn_name(\"pool_sqlite\")  connection_info() #> # A tibble: 2 × 7 #>   name          description                  live  default driver conn_str pool  #>   <chr>         <chr>                        <lgl> <lgl>   <glue> <chr>    <lgl> #> 1 pool_sqlite   A pooled connection to an i… TRUE  TRUE    RSQLi… NA       TRUE  #> 2 simple_sqlite A simple connection to an i… TRUE  FALSE   RSQLi… NA       FALSE  get_default_conn_name() #> [1] \"pool_sqlite\""},{"path":[]},{"path":"https://majerr.github.io/sqlhelper/news/index.html","id":"submission-fixes-0-2-1","dir":"Changelog","previous_headings":"","what":"submission fixes","title":"sqlhelper 0.2.1","text":"quote ‘SQL’ title description removed output via print()/cat(). Now message()/warning()/stop() used removed (FALSE) examples fixed codecov badge","code":""},{"path":[]},{"path":"https://majerr.github.io/sqlhelper/news/index.html","id":"enhancements-0-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"sqlhelper 0.2.0","text":"connection configs now inherit characteristics earlier configs name (.e. site-wide configs may tweaked users) (#9) config_examples() added provide example connection yaml strings renamed runqueries() runfiles() run_queries() run_files() added runqueries() runfiles() aliases run_queries() run_files() vignette(\"sqlhelper\") updated vignette(\"connections\") updated vignette(\"execution\") added vignette(\"use_case\") added (#14) read_sql() now accepts flag turn cascade behaviour (#7) run_files() longer requires explicit cascade argument run_files() run_queries() now attempt connect lazily using config search path (#8)","code":""},{"path":"https://majerr.github.io/sqlhelper/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"sqlhelper 0.2.0","text":"read/prep functions now pass dots instead duplicating default values (#6) not_connected() longer errors passed missing connection name (#10)","code":""},{"path":[]},{"path":"https://majerr.github.io/sqlhelper/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"sqlhelper 0.1.2","text":"runfiles() error preparing multiple files (#1)","code":""},{"path":"https://majerr.github.io/sqlhelper/news/index.html","id":"sqlhelper-011","dir":"Changelog","previous_headings":"","what":"sqlhelper 0.1.1","title":"sqlhelper 0.1.1","text":"Added NEWS.md file track changes package.","code":""}]
