% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sqlrunners.R
\name{runqueries}
\alias{runqueries}
\title{Execute a sequence of SQL queries}
\usage{
runqueries(sql, ..., default.conn = default_conn(), include_params = FALSE)
}
\arguments{
\item{sql}{An optionally-named list or character vector containing sql
strings, or a tibble returned by \code{\link[=read_sql]{read_sql()}} or \code{\link[=prepare_sql]{prepare_sql()}}}

\item{...}{Arguments to be passed to \code{prepare_sql()}}

\item{include_params}{\code{TRUE} or \code{FALSE}. Should the parameters be included in the output?}
}
\value{
If \code{include_params} is \code{FALSE}, a named list containing the
results of each query; the names are taken from the \code{sql} parameter.
If \code{include_params} is \code{TRUE}, a tibble containing the query as
executed, the execution parameters, and the result of each query.

A tibble containing 1 row per query with the following fields:
\describe{
\item{qname}{character. A name for this query}
\item{quotesql}{"yes" or "no". Should parameterized character values be quoted for this query?}
\item{interpolate}{"yes" or "no". Should this query be parameterized with values from R?}
\item{execmethod}{The method to execute this query.
One of "get" (\code{\link[DBI:dbGetQuery]{DBI::dbGetQuery()}}), "execute" (\code{\link[DBI:dbExecute]{DBI::dbExecute()}}), "sendq" (\code{\link[DBI:dbSendQuery]{DBI::dbSendQuery()}}), "sends" (\code{\link[DBI:dbSendStatement]{DBI::dbSendStatement()}}) or "spatial" (\code{\link[sf:st_read]{sf::st_read()}})}
\item{geometry}{character. If \code{execmethod} is "spatial", which is the geometry column?}
\item{conn_name}{character. The name of the database connection to use for this query.
Must be the name of a configured sqlhelper connection.}
\item{sql}{The sql query to be executed}
\item{filename}{The value of \code{file_name}}
\item{prepared_sql}{The sql query to be executed, i.e. with interpolations
and quoting in place}
\item{}
}
}
\description{
Accepts a character vector of SQL queries and runs each one
}
\examples{
library(sqlhelper)

connect(
    system.file("examples/sqlhelper_db_conf.yml",
                package="sqlhelper"),
    exclusive=TRUE
    )

DBI::dbWriteTable(live_connection( get_default_conn_name() ),
                  "iris",
                  iris)

n <- 5

runqueries(
    c(top_n = "select * from iris limit {n}", # interpolation is controlled
                                              # with the 'values' argument
      uniqs = "select distinct species as species from iris")
)

## Use the execmethod parameter if you don't want to return results
runqueries("create table iris_setosa as select * from iris where species = 'setosa'",
           execmethod = 'execute')

runqueries("select distinct species as species from iris_setosa")

}
\seealso{
\code{\link{runfiles}}

Other SQL runners: 
\code{\link{runfiles}()}
}
\concept{SQL runners}
