% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolate_sql.R
\name{interpolate_sql}
\alias{interpolate_sql}
\title{Parameterize SQL queries}
\usage{
interpolate_sql(sql, interpolate = parent.frame(), quote = default_conn_name)
}
\arguments{
\item{sql}{A list or character vector of sql queries or file names. If any
elements do not name an existing file, all are treated as sql queries.}

\item{interpolate}{An environment containing values for interpolation, or
\code{FALSE.} If \code{FALSE}, no interpolation is done. Defaults to
\code{parent.frame()}}

\item{quote}{The name of a connection to be used by \code{glue::glue_sql} or
\code{FALSE}. If \code{FALSE}, \code{glue::glue} is used. Defaults to
\code{default_conn_name}.}
}
\value{
A list or character vector of parameterized sql queries
}
\description{
Accepts a list or character vector of SQL queries and parameterizes each.
}
\examples{
library(sqlhelper)
con <- DBI::dbConnect(RSQLite::SQLite(),":memory:")
iris2 <- iris
colnames(iris2) <- gsub("[.]", "_", tolower(colnames(iris)))
DBI::dbWriteTable(con, "iris", iris2)

table_name <- "iris"
var <- "Sepal_Length"
n <- 10

\dontrun{tbl_sql <- interpolate_sql("select {var} from {`table_name`} limit {n}")}
}
